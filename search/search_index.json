{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Supadantic","text":"<p>Supadantic is a small Python library that allows you to manage Supabase tables through Pydantic models. It is very convenient to use in projects based on FastAPI, Flask, and so on.</p>"},{"location":"#important-information","title":"Important information","text":"<p>Supadantic may not have backward compatibility until version <code>0.1.0</code>. This is because the library is still experimental and is being used in several of my other projects, where requirements are still being finalized.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install using <code>pip install -U supadantic</code>.</p> <p>Also, you need to add <code>SUPABASE_URL</code> and <code>SUPABASE_KEY</code> to your env variables.</p>"},{"location":"#a-simple-example","title":"A Simple example","text":"<pre><code>from supadantic.models import BaseSBModel\n\n\nclass User(BaseSBModel):\n    # id field already defined in BaseSBModel class\n    name: str = 'John Doe'\n    is_active: bool = True\n\n    # By default table name is class name in snake_case\n    # you can override it by setting `Meta.table_name` attribute\n    class Meta:\n        table_name = 'db_user'\n\n# Save user\nactive_user = User(name='John Snow')\nactive_user.save()\n\nnon_active_user = User(is_active=False)\nnon_active_user.save()\n\n# Get all users\nusers = User.objects.all()\n\n# Count users\nusers.count()\n\n# Get first user\nusers.first()\n\n# Get last user\nusers.last()\n\n# Filter users\nactive_users = User.objects.filter(is_active=True)\n# Or\nactive_users = User.objects.exclude(is_active=False)\n\n# Update all active users\nactive_users.update(is_active=False)\n\n# Delete all non active users\nUser.objects.exclude(is_active=True).delete()\n\n# Get one user and delete\nuser = User.objects.get(name='John Doe')\nuser.delete()\n</code></pre>"},{"location":"fast_api_usage/","title":"FastAPI Example","text":""},{"location":"fast_api_usage/#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.10</li> <li>You have to setup supabase project.</li> <li>Take the key that suits you best. For this example we recommend using <code>service_role</code>, but it is not suitable for production. You can read more here.</li> </ul>"},{"location":"fast_api_usage/#installation-and-setup-the-project","title":"Installation and setup the project","text":"<p>First of all you need to install the main dependencies: <pre><code>pip install supadantic fastapi uvicorn\n</code></pre> Then add<code>SUPABASE_URL</code> and <code>SUPABASE_KEY</code> env variables to <code>.env</code>.</p>"},{"location":"fast_api_usage/#usage-supadantic-with-fastapi","title":"Usage supadantic with FastAPI","text":"<p>Let\u2019s define <code>book</code> and <code>author</code> tables in supabase: </p> <p>Here is the full example of FastAPI application integrated with supadantic models: <pre><code>import uvicorn\nfrom fastapi import FastAPI, HTTPException, status\nfrom fastapi.responses import Response\nfrom pydantic import BaseModel\nfrom supadantic.models import BaseSBModel\n\n\napp = FastAPI()\n\n\n# Define supadantic models\nclass Author(BaseSBModel):\n    name: str\n    surname: str\n    age: int\n\n\nclass Book(BaseSBModel):\n    name: str\n    genre: str\n    count_pages: int | None = None\n    author_id: int\n\n\n# Define pydantic schemas\nclass CreateAuthor(BaseModel):\n    name: str\n    surname: str\n    age: int\n\n\nclass UpdateAuthor(BaseModel):\n    name: str | None = None\n    surname: str | None = None\n    age: int | None = None\n\n\nclass CreateBook(BaseModel):\n    name: str\n    genre: str\n    count_pages: int\n\n\nclass UpdateBook(BaseModel):\n    name: str | None = None\n    genre: str | None = None\n    count_pages: int | None = None\n\n\n# Define endpoints\n@app.get(\"/authors/\")\ndef authors_list() -&gt; list[Author]:\n    return Author.objects.all()\n\n\n@app.get(\"/authors/{id}/\")\ndef retrieve_author(id: int) -&gt; Author:\n    try:\n        return Author.objects.get(id=id)\n    except Author.DoesNotExist:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Author not found.\"\n        )\n\n\n@app.post(\"/authors/\")\ndef create_author(data: CreateAuthor) -&gt; Author:\n    return Author.objects.create(**data.model_dump())\n\n\n@app.delete(\"/authors/{id}/\")\ndef delete_author(id: int):\n    try:\n        Author.objects.get(id=id).delete()\n        return Response(status_code=status.HTTP_204_NO_CONTENT)\n    except Author.DoesNotExist:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Author not found.\"\n        )\n\n\n@app.patch(\"/authors/{id}/\")\ndef update_author(id: int, data: UpdateAuthor):\n    updated_data = data.model_dump(exclude_unset=True)\n    author = Author.objects.filter(id=id)\n\n    if not author.exists():\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Author not found.\"\n        )\n    author.update(**updated_data)\n\n    return Response(status_code=status.HTTP_204_NO_CONTENT)\n\n\n@app.get(\"/authors/{author_id}/books/\")\ndef author_book_list(author_id: int) -&gt; list[Book]:\n    if not Author.objects.filter(id=author_id).exists():\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Author not found.\"\n        )\n    return Book.objects.filter(author_id=author_id)\n\n\n@app.get(\"/authors/{author_id}/books/{id}/\")\ndef retrieve_book(author_id: int, id: int) -&gt; Book:\n    if not Author.objects.filter(id=author_id).exists():\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Author not found.\"\n        )\n\n    try:\n        return Book.objects.get(id=id, author_id=author_id)\n    except Book.DoesNotExist:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Book not found.\"\n        )\n\n\n@app.post(\"/authors/{author_id}/books/\")\ndef create_book(author_id: int, data: CreateBook) -&gt; Book:\n    if not Author.objects.filter(id=author_id).exists():\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Author not found.\"\n        )\n    return Book.objects.create(**data.model_dump(), author_id=author_id)\n\n\n@app.patch(\"/authors/{author_id}/books/{id}/\")\ndef update_book(author_id: int, id: int, data: UpdateBook):\n    updated_data = data.model_dump(exclude_unset=True)\n    if not Author.objects.filter(id=author_id).exists():\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Author not found.\"\n        )\n\n    book = Book.objects.filter(id=id, author_id=author_id)\n    if not book.exists():\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Book not found\"\n        )\n    book.update(**updated_data)\n\n    return Response(status_code=status.HTTP_204_NO_CONTENT)\n\n\n@app.delete(\"/authors/{author_id}/books/{id}/\")\ndef delete_book(author_id: int, id: int):\n    try:\n        author = Author.objects.get(id=author_id)\n        Book.objects.get(id=id, author_id=author.id).delete()\n        return Response(status_code=status.HTTP_204_NO_CONTENT)\n    except Author.DoesNotExist:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Author not found\"\n        )\n    except Book.DoesNotExist:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Book not found\"\n        )\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(app=\"main:app\", host=\"localhost\", port=8000, reload=True)\n</code></pre></p>"},{"location":"fast_api_usage/#testing-in-supadantic-via-cacheclient","title":"Testing in supadantic via <code>CacheClient</code>","text":"<p>In <code>conftest.py</code> define the following fixtures: <pre><code>from unittest.mock import patch\n\nimport pytest\nfrom supadantic.clients.cache import CacheClient\nfrom supadantic.models import BaseSBModel\n\nfrom main import Author\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef mock_db_client():\n    with patch.object(BaseSBModel, \"db_client\", return_value=CacheClient):\n        yield\n\n\n@pytest.fixture(scope=\"function\", autouse=True)\ndef clear_cache():\n    yield\n    Author.objects.all().delete()\n</code></pre></p> <p>Then create <code>test_author_api.py</code> module with following code: <pre><code>import pytest\nfrom fastapi.testclient import TestClient\n\nfrom main import Author, app\n\n\nclass TestAuthorAPI:\n    @pytest.fixture\n    def test_api_client(self):\n        return TestClient(app)\n\n    def test_get_authors(self, test_api_client: 'TestClient'):\n        # Arrange\n        author_1 = Author.objects.create(\n            name='William', surname='Shakespeare', age=51\n        )\n        author_2 = Author.objects.create(\n            name='Agatha', surname='Christie', age=85\n        )\n\n        # Act\n        response = test_api_client.get(\"/authors/\")\n\n        # Assert\n        assert response.status_code == 200\n        assert response.json() == [\n            {\n                \"id\": author_1.id,\n                \"name\": \"William\",\n                \"surname\": \"Shakespeare\",\n                \"age\": 51,\n            },\n            {\n                \"id\": author_2.id,\n                \"name\": \"Agatha\",\n                \"surname\": \"Christie\",\n                \"age\": 85,\n            },\n        ]\n\n    def test_get_author_not_found(self, test_api_client: 'TestClient'):\n        # Act\n        response = test_api_client.get(\"/authors/1/\")\n\n        # Assert\n        assert response.status_code == 404\n        assert response.json() == {\"detail\": \"Author not found.\"}\n\n    def test_get_author(self, test_api_client: 'TestClient'):\n        # Arrange\n        author = Author.objects.create(name='J.K.', surname='Rowling', age=57)\n\n        # Act\n        response = test_api_client.get(f\"/authors/{author.id}/\")\n\n        # Assert\n        assert response.status_code == 200\n        assert response.json() == {\n            \"id\": author.id,\n            \"name\": \"J.K.\",\n            \"surname\": \"Rowling\",\n            \"age\": 57,\n        }\n\n    def test_delete_author(self, test_api_client: 'TestClient'):\n        # Arrange\n        author = Author.objects.create(\n            name='Ernest', surname='Hemingway', age=61\n        )\n\n        # Act\n        response = test_api_client.delete(f\"/authors/{author.id}/\")\n\n        # Assert\n        assert response.status_code == 204\n        assert not Author.objects.filter(id=author.id).exists()\n\n    def test_delete_author_not_found(self, test_api_client: 'TestClient'):\n        # Act\n        response = test_api_client.delete(\"/authors/9999/\")\n\n        # Assert\n        assert response.status_code == 404\n        assert response.json() == {\"detail\": \"Author not found.\"}\n\n    def test_create_author(self, test_api_client: 'TestClient'):\n        # Act\n        response = test_api_client.post(\n            \"/authors/\",\n            json={\n                \"name\": \"William\",\n                \"surname\": \"Shakespeare\",\n                \"age\": 52,\n            },\n        )\n\n        # Assert\n        assert response.status_code == 200\n        assert response.json() == {\n            \"id\": response.json()[\"id\"],\n            \"name\": \"William\",\n            \"surname\": \"Shakespeare\",\n            \"age\": 52,\n        }\n\n        assert Author.objects.filter(\n            id=response.json()[\"id\"],\n            name=\"William\",\n            surname=\"Shakespeare\",\n            age=52,\n        )\n\n    def test_update_author(self, test_api_client: \"TestClient\"):\n        # Arrange\n        author = Author.objects.create(\n            name='Ernest', surname='Hemingway', age=61\n        )\n\n        # Act\n        response = test_api_client.patch(\n            f\"/authors/{author.id}/\",\n            json={\"age\": 62},\n        )\n\n        # Assert\n        assert response.status_code == 204\n        assert Author.objects.filter(id=author.id, age=62).exists()\n</code></pre></p>"},{"location":"q_set/","title":"QSet","text":""},{"location":"q_set/#supadantic.q_set.QSet","title":"QSet","text":"<pre><code>QSet(model_class: type[_M], cache: list[_M] | None = None, query_builder: QueryBuilder | None = None)\n</code></pre> <p>               Bases: <code>Generic[_M]</code></p> <p>Represents a set of query operations for a specific model.</p> <p>This class provides a chainable interface for building and executing database queries related to a particular model. It handles filtering, updating, creating, deleting, and retrieving data.  It's designed to work with a <code>BaseClient</code> for interacting with the database and a <code>QueryBuilder</code> for constructing queries.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Get all instances of the Model class.\n&gt;&gt;&gt; all_models = Model.objects.all()\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Filter for instances with name equal to \"example\".\n&gt;&gt;&gt; filtered_models = Model.objects.filter(name=\"example\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Get the last instance.\n&gt;&gt;&gt; last_model = Model.objects.last()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_class</code> <code>Type[_M]</code> <p>The model class associated with this QSet.</p> required <code>cache</code> <code>list[_M] | None</code> <p>An optional initial cache of model instances.</p> <code>None</code> <code>query_builder</code> <code>QueryBuilder | None</code> <p>An optional QueryBuilder instance.  If None, a new                                  instance is created.</p> <code>None</code> <p>Classes:</p> Name Description <code>InvalidField</code> <p>Exception raised when attempting to filter with an invalid field.</p> <code>InvalidFilter</code> <p>Exception raised when attempting to update or create a record with an invalid field.</p> <p>Methods:</p> Name Description <code>all</code> <p>Returns a QSet containing all instances of the associated model.</p> <code>count</code> <p>Gets the number of objects matching the current query.</p> <code>create</code> <p>Creates a new instance of the model in the database.</p> <code>delete</code> <p>Deletes the objects in the QSet from the database.</p> <code>exclude</code> <p>Excludes objects based on the provided keyword arguments.</p> <code>exists</code> <p>Checks if any objects match the current query.</p> <code>filter</code> <p>Returns a QSet filtered by the given keyword arguments.</p> <code>first</code> <p>Gets the first object matching the current query.</p> <code>get</code> <p>Gets a single object matching the provided filters.</p> <code>get_or_create</code> <p>Tries to retrieve an object with the given parameters or creates one if it doesn't exist.</p> <code>last</code> <p>Returns the last object in the QSet.</p> <code>order_by</code> <p>Orders the query results by the specified field.</p> <code>update</code> <p>Updates the objects in the QSet with the provided data.</p> <p>Attributes:</p> Name Type Description <code>client</code> <code>BaseClient</code> <p>Gets the database client for the model.</p> Source code in <code>supadantic/q_set.py</code> <pre><code>def __init__(\n    self,\n    model_class: type[_M],\n    cache: list[_M] | None = None,\n    query_builder: QueryBuilder | None = None,\n) -&gt; None:\n    \"\"\"\n    Initializes the QSet with the model class, cache, and query builder.\n\n    Args:\n        model_class (Type[_M]): The model class associated with this QSet.\n        cache (list[_M] | None): An optional initial cache of model instances.\n        query_builder (QueryBuilder | None): An optional QueryBuilder instance.  If None, a new\n                                             instance is created.\n    \"\"\"\n\n    self._model_class = model_class\n    self._cache = cache\n    self._query_builder = query_builder if query_builder else QueryBuilder()\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.client","title":"client  <code>property</code>","text":"<pre><code>client: BaseClient\n</code></pre> <p>Gets the database client for the model.</p> <p>This method retrieves the database client associated with the model class. The database client is responsible for executing the queries.</p> <p>Returns:</p> Type Description <code>BaseClient</code> <p>The database client instance.</p>"},{"location":"q_set/#supadantic.q_set.QSet.InvalidField","title":"InvalidField","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when attempting to filter with an invalid field.</p>"},{"location":"q_set/#supadantic.q_set.QSet.InvalidFilter","title":"InvalidFilter","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when attempting to update or create a record with an invalid field.</p>"},{"location":"q_set/#supadantic.q_set.QSet.all","title":"all","text":"<pre><code>all() -&gt; QSet[_M]\n</code></pre> <p>Returns a QSet containing all instances of the associated model.</p> <p>This method clears any existing filters on the QSet.</p> <p>Returns:</p> Type Description <code>QSet[_M]</code> <p>A QSet containing all instances of the model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; qs = Model.objects.all()\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def all(self) -&gt; 'QSet[_M]':\n    \"\"\"\n    Returns a QSet containing all instances of the associated model.\n\n    This method clears any existing filters on the QSet.\n\n    Returns:\n        (QSet[_M]): A QSet containing all instances of the model.\n\n    Examples:\n        &gt;&gt;&gt; qs = Model.objects.all()\n    \"\"\"\n\n    return self._copy()\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.count","title":"count","text":"<pre><code>count() -&gt; int\n</code></pre> <p>Gets the number of objects matching the current query.</p> <p>This method returns the number of objects in the database that match the filters applied to the QSet. If the results are already cached, the count is returned from the cache. Otherwise, a database query is executed.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of objects matching the query.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; count = Model.objects.filter(name='example').count()\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def count(self) -&gt; int:\n    \"\"\"\n    Gets the number of objects matching the current query.\n\n    This method returns the number of objects in the database that match the\n    filters applied to the QSet. If the results are already cached, the\n    count is returned from the cache. Otherwise, a database query is executed.\n\n    Returns:\n        The number of objects matching the query.\n\n    Examples:\n        &gt;&gt;&gt; count = Model.objects.filter(name='example').count()\n    \"\"\"\n\n    if self._cache is not None:\n        return len(self._cache)\n\n    self._query_builder.set_count_mode(True)\n    result = self.client.execute(query_builder=self._query_builder)\n    if not isinstance(result, int):\n        raise TypeError(f\"Expected int from client.execute in count(), got {type(result)}\")\n\n    return result\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.create","title":"create","text":"<pre><code>create(**data) -&gt; _M\n</code></pre> <p>Creates a new instance of the model in the database.</p> <p>This method sets the <code>insert_data</code> attribute on the QueryBuilder and executes the query. It returns a new model instance populated with the data from the database after the insert operation.</p> <p>Parameters:</p> Name Type Description Default <code>**data</code> <code>dict[str, Any]</code> <p>Keyword arguments representing the fields and their values for the new instance.</p> <code>{}</code> <p>Returns:</p> Type Description <code>_M</code> <p>The newly created model instance.</p> Source code in <code>supadantic/q_set.py</code> <pre><code>def create(self, **data) -&gt; _M:\n    \"\"\"\n    Creates a new instance of the model in the database.\n\n    This method sets the `insert_data` attribute on the QueryBuilder and executes\n    the query. It returns a new model instance populated with the data from the\n    database after the insert operation.\n\n    Args:\n        **data (dict[str, Any]): Keyword arguments representing the fields and their values for the new instance.\n\n    Returns:\n        (_M): The newly created model instance.\n    \"\"\"\n\n    validated_model: _M = self._model_class.model_validate(data)\n    data = validated_model.model_dump(mode='json', exclude={'id'})\n\n    self._query_builder.set_insert_data(data)\n    response_data = self.client.execute(query_builder=self._query_builder)\n    if not isinstance(response_data, list):\n        raise TypeError(f\"Expected list from client.execute in create(), got {type(response_data)}\")\n\n    return self._model_class(**response_data[0])\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.delete","title":"delete","text":"<pre><code>delete() -&gt; int\n</code></pre> <p>Deletes the objects in the QSet from the database.</p> <p>This method sets the <code>delete_mode</code> attribute on the QueryBuilder and executes the query. It returns the number of objects that were deleted.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of objects deleted.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; num_deleted = Model.objects.filter(active=False).delete()\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def delete(self) -&gt; int:\n    \"\"\"\n    Deletes the objects in the QSet from the database.\n\n    This method sets the `delete_mode` attribute on the QueryBuilder and executes\n    the query. It returns the number of objects that were deleted.\n\n    Returns:\n        (int): The number of objects deleted.\n\n    Examples:\n        &gt;&gt;&gt; num_deleted = Model.objects.filter(active=False).delete()\n    \"\"\"\n\n    self._query_builder.set_delete_mode(True)\n    self._execute()\n    return len(self._cache) if self._cache else 0\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.exclude","title":"exclude","text":"<pre><code>exclude(**filters: Any) -&gt; QSet[_M]\n</code></pre> <p>Excludes objects based on the provided keyword arguments.</p> <p>This method adds non-equality filters to the query. Only objects that do not match any of the provided filters will be included in the resulting QSet.</p> <p>Parameters:</p> Name Type Description Default <code>**filters</code> <code>Any</code> <p>Keyword arguments representing the filters to apply.</p> <code>{}</code> <p>Returns:</p> Type Description <code>QSet[_M]</code> <p>A new QSet instance with the added exclusion filters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; qs = Model.objects.exclude(name='example', age=30)\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def exclude(self, **filters: Any) -&gt; 'QSet[_M]':\n    \"\"\"\n    Excludes objects based on the provided keyword arguments.\n\n    This method adds non-equality filters to the query. Only objects that do\n    not match any of the provided filters will be included in the resulting QSet.\n\n    Args:\n        **filters: Keyword arguments representing the filters to apply.\n\n    Returns:\n        A new QSet instance with the added exclusion filters.\n\n    Examples:\n        &gt;&gt;&gt; qs = Model.objects.exclude(name='example', age=30)\n    \"\"\"\n\n    self._validate_filters(**filters)\n    for filter_field, value in filters.items():\n        filter_type = filter_field.split(\"__\")\n\n        _filters = {filter_type[0]: value}\n\n        if len(filter_type) == 1:\n            self._query_builder.set_not_equal(**_filters)\n        elif filter_type[1] == \"lte\":\n            self._query_builder.set_greater_than(**_filters)\n        elif filter_type[1] == \"gt\":\n            self._query_builder.set_less_than_or_equal(**_filters)\n        elif filter_type[1] == \"lt\":\n            self._query_builder.set_greater_than_or_equal(**_filters)\n        elif filter_type[1] == \"gte\":\n            self._query_builder.set_less_than(**_filters)\n\n    return self._copy()\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.exists","title":"exists","text":"<pre><code>exists() -&gt; bool\n</code></pre> <p>Checks if any objects match the current query.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if matching objects exist, False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; if Model.objects.filter(name='example').exists():\n...     print(\"Objects with name 'example' exist!\")\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def exists(self) -&gt; bool:\n    \"\"\"\n    Checks if any objects match the current query.\n\n    Returns:\n        (bool): True if matching objects exist, False otherwise.\n\n    Examples:\n        &gt;&gt;&gt; if Model.objects.filter(name='example').exists():\n        ...     print(\"Objects with name 'example' exist!\")\n    \"\"\"\n\n    if self._cache is not None:\n        return bool(self._cache)\n\n    result = self.client.execute(query_builder=self._query_builder)\n    return bool(result)\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.filter","title":"filter","text":"<pre><code>filter(**filters: Any) -&gt; QSet[_M]\n</code></pre> <p>Returns a QSet filtered by the given keyword arguments.</p> <p>Each keyword argument represents a field name and its desired value. Multiple filters are combined with AND logic.</p> <p>Parameters:</p> Name Type Description Default <code>**filters</code> <code>Any</code> <p>Keyword arguments representing the filter criteria.</p> <code>{}</code> <p>Returns:</p> Type Description <code>QSet[_M]</code> <p>A new QSet instance with the specified filters applied.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; qs = Model.objects.filter(name='example', age=20)\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def filter(self, **filters: Any) -&gt; 'QSet[_M]':\n    \"\"\"\n    Returns a QSet filtered by the given keyword arguments.\n\n    Each keyword argument represents a field name and its desired value.\n    Multiple filters are combined with AND logic.\n\n    Args:\n        **filters: Keyword arguments representing the filter criteria.\n\n    Returns:\n        (QSet[_M]): A new QSet instance with the specified filters applied.\n\n    Examples:\n        &gt;&gt;&gt; qs = Model.objects.filter(name='example', age=20)\n    \"\"\"\n\n    self._validate_filters(**filters)\n\n    for filter_field, value in filters.items():\n        filter_type = filter_field.split(\"__\")\n\n        _filters = {filter_type[0]: value}\n\n        if len(filter_type) == 1:\n            self._query_builder.set_equal(**_filters)\n        elif filter_type[1] == \"lte\":\n            self._query_builder.set_less_than_or_equal(**_filters)\n        elif filter_type[1] == \"gt\":\n            self._query_builder.set_greater_than(**_filters)\n        elif filter_type[1] == \"lt\":\n            self._query_builder.set_less_than(**_filters)\n        elif filter_type[1] == \"gte\":\n            self._query_builder.set_greater_than_or_equal(**_filters)\n        elif filter_type[1] == \"in\":\n            self._query_builder.set_included(**_filters)\n\n    return self._copy()\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.first","title":"first","text":"<pre><code>first() -&gt; _M | None\n</code></pre> <p>Gets the first object matching the current query.</p> <p>This method returns the first object in the QSet. If the QSet is empty, this method returns None.</p> <p>Returns:</p> Type Description <code>_M | None</code> <p>The first object in the QSet, or None if the QSet is empty.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = Model.objects.filter(name='example').first()\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def first(self) -&gt; _M | None:\n    \"\"\"\n    Gets the first object matching the current query.\n\n    This method returns the first object in the QSet. If the QSet is empty,\n    this method returns None.\n\n    Returns:\n        The first object in the QSet, or None if the QSet is empty.\n\n    Examples:\n        &gt;&gt;&gt; obj = Model.objects.filter(name='example').first()\n    \"\"\"\n\n    try:\n        return self[0]\n    except IndexError:\n        return None\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.get","title":"get","text":"<pre><code>get(**filters: Any) -&gt; _M\n</code></pre> <p>Gets a single object matching the provided filters.</p> <p>This method retrieves a single object from the database that matches the provided filters. If no object matches the filters, a DoesNotExist exception is raised. If more than one object matches the filters, a MultipleObjectsReturned exception is raised.</p> <p>Parameters:</p> Name Type Description Default <code>**filters</code> <code>Any</code> <p>Keyword arguments representing the filters to apply.</p> <code>{}</code> <p>Returns:</p> Type Description <code>_M</code> <p>The object matching the filters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; qs = Model.objects.get(name='example', age=30)\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def get(self, **filters: Any) -&gt; _M:\n    \"\"\"\n    Gets a single object matching the provided filters.\n\n    This method retrieves a single object from the database that matches the\n    provided filters. If no object matches the filters, a DoesNotExist\n    exception is raised. If more than one object matches the filters, a\n    MultipleObjectsReturned exception is raised.\n\n    Args:\n        **filters: Keyword arguments representing the filters to apply.\n\n    Returns:\n        (_M): The object matching the filters.\n\n    Examples:\n        &gt;&gt;&gt; qs = Model.objects.get(name='example', age=30)\n    \"\"\"\n\n    self.filter(**filters)\n    self._execute()\n\n    if not self._cache:\n        raise self._model_class.DoesNotExist(f'{self._model_class.__name__} object with {filters} does not exist!')\n\n    if len(self._cache) &gt; 1:\n        raise self._model_class.MultipleObjectsReturned(\n            f'For {filters} returned more than 1 {self._model_class.__name__} objects!'\n        )\n\n    return self._cache[0]\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.get_or_create","title":"get_or_create","text":"<pre><code>get_or_create(defaults: dict[str, Any] | None = None, **kwargs: Any) -&gt; tuple[_M, bool]\n</code></pre> <p>Tries to retrieve an object with the given parameters or creates one if it doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>defaults</code> <code>dict[str, Any] | None</code> <p>A dictionary of values to use when creating a new object.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Keyword arguments representing the filter criteria.</p> <code>{}</code> <p>Returns:</p> Type Description <code>tuple[_M, bool]</code> <p>A tuple containing the retrieved or created object and a boolean indicating whether                the object was newly created or retrieved.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj, created = Model.objects.get_or_create(name=\"Alex\", defaults={\"age\": 30})\n&gt;&gt;&gt; if created:\n...     print(\"New object created!\")\n&gt;&gt;&gt; else:\n...     print(\"Object retrieved.\")\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def get_or_create(self, defaults: dict[str, Any] | None = None, **kwargs: Any) -&gt; tuple[_M, bool]:\n    \"\"\"\n    Tries to retrieve an object with the given parameters or creates one if it doesn't exist.\n\n    Args:\n        defaults (dict[str, Any] | None): A dictionary of values to use when creating a new object.\n        **kwargs (Any): Keyword arguments representing the filter criteria.\n\n    Returns:\n        (tuple[_M, bool]): A tuple containing the retrieved or created object and a boolean indicating whether\n                           the object was newly created or retrieved.\n\n    Examples:\n        &gt;&gt;&gt; obj, created = Model.objects.get_or_create(name=\"Alex\", defaults={\"age\": 30})\n        &gt;&gt;&gt; if created:\n        ...     print(\"New object created!\")\n        &gt;&gt;&gt; else:\n        ...     print(\"Object retrieved.\")\n    \"\"\"\n\n    try:\n        return self.get(**kwargs), False\n    except self._model_class.DoesNotExist:\n        if defaults is not None:\n            kwargs.update(defaults)\n        new_obj = self.create(**kwargs)\n        return new_obj, True\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.last","title":"last","text":"<pre><code>last() -&gt; _M | None\n</code></pre> <p>Returns the last object in the QSet.</p> <p>If the QSet is empty, returns None. This method executes the query to populate the cache before retrieving the last element.</p> <p>Returns:</p> Type Description <code>_M | None</code> <p>The last object in the QSet, or None if the QSet is empty.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = Model.objects.all().last()\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def last(self) -&gt; _M | None:\n    \"\"\"\n    Returns the last object in the QSet.\n\n    If the QSet is empty, returns None. This method executes the query to\n    populate the cache before retrieving the last element.\n\n    Returns:\n        The last object in the QSet, or None if the QSet is empty.\n\n    Examples:\n        &gt;&gt;&gt; obj = Model.objects.all().last()\n    \"\"\"\n\n    try:\n        return self[-1]\n    except IndexError:\n        return None\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.order_by","title":"order_by","text":"<pre><code>order_by(key: str) -&gt; QSet[_M]\n</code></pre> <p>Orders the query results by the specified field.</p> <p>This method sets the ordering of the query results based on the provided key. The key can be prefixed with '-' to indicate descending order.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The field name to order by. Prefix with '-' for descending order.</p> required <p>Returns:</p> Type Description <code>QSet[_M]</code> <p>A new QSet instance with the ordering applied.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Order by name ascending\n&gt;&gt;&gt; qs = Model.objects.order_by('name')\n&gt;&gt;&gt; # Order by age descending\n&gt;&gt;&gt; qs = Model.objects.order_by('-age')\n</code></pre> <p>Raises:</p> Type Description <code>InvalidField</code> <p>If the specified field does not exist in the model.</p> Source code in <code>supadantic/q_set.py</code> <pre><code>def order_by(self, key: str) -&gt; 'QSet[_M]':\n    \"\"\"\n    Orders the query results by the specified field.\n\n    This method sets the ordering of the query results based on the provided key.\n    The key can be prefixed with '-' to indicate descending order.\n\n    Args:\n        key (str): The field name to order by. Prefix with '-' for descending order.\n\n    Returns:\n        (QSet[_M]): A new QSet instance with the ordering applied.\n\n    Examples:\n        &gt;&gt;&gt; # Order by name ascending\n        &gt;&gt;&gt; qs = Model.objects.order_by('name')\n        &gt;&gt;&gt; # Order by age descending\n        &gt;&gt;&gt; qs = Model.objects.order_by('-age')\n\n    Raises:\n        InvalidField: If the specified field does not exist in the model.\n    \"\"\"\n\n    column = key.split('-')[-1]\n    if column not in self._model_class.model_fields.keys():\n        raise self.InvalidField(f\"Invalid field: '{column}'!\")\n\n    self._query_builder.set_order_by_field(key)\n    return self._copy()\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.update","title":"update","text":"<pre><code>update(**data: Any) -&gt; int\n</code></pre> <p>Updates the objects in the QSet with the provided data.</p> <p>This method sets the <code>update_data</code> attribute on the QueryBuilder and executes the query. It returns the number of objects that were updated.</p> <p>Parameters:</p> Name Type Description Default <code>**data</code> <code>Any</code> <p>Keyword arguments representing the fields to update and their new values.</p> <code>{}</code> <p>Returns:</p> Type Description <code>int</code> <p>The number of objects updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; num_updated = Model.objects.filter(active=True).update(name='new_name')\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def update(self, **data: Any) -&gt; int:\n    \"\"\"\n    Updates the objects in the QSet with the provided data.\n\n    This method sets the `update_data` attribute on the QueryBuilder and executes\n    the query. It returns the number of objects that were updated.\n\n    Args:\n        **data: Keyword arguments representing the fields to update and their new values.\n\n    Returns:\n        (int): The number of objects updated.\n\n    Examples:\n        &gt;&gt;&gt; num_updated = Model.objects.filter(active=True).update(name='new_name')\n    \"\"\"\n\n    validated_model: _M = self._model_class.model_validate(data)\n    data = validated_model.model_dump(mode='json', exclude_unset=True, exclude={'id'})\n\n    self._query_builder.set_update_data(data)\n    self._execute()\n    return len(self._cache) if self._cache else 0\n</code></pre>"},{"location":"query_builder/","title":"QueryBuilder","text":""},{"location":"query_builder/#supadantic.query_builder.QueryBuilder","title":"QueryBuilder","text":"<pre><code>QueryBuilder()\n</code></pre> <p>A class for constructing database queries in a structured way.</p> <p>This class provides a fluent interface for building queriess. It encapsulates the query building logic, making it easier to construct complex queries in a readable and maintainable way.</p> <p>Classes:</p> Name Description <code>Mode</code> <p>Enum representing the different query modes.</p> <p>Methods:</p> Name Description <code>set_count_mode</code> <p>Sets the count mode flag.</p> <code>set_delete_mode</code> <p>Sets the delete mode flag.</p> <code>set_equal</code> <p>Sets the equality filters for the query.</p> <code>set_greater_than</code> <p>Sets the greater than filters for the query.</p> <code>set_greater_than_or_equal</code> <p>Sets the greater than or equal filters for the query.</p> <code>set_included</code> <p>Sets the included filter values for the query.</p> <code>set_insert_data</code> <p>Sets the data to be inserted in an insert query.</p> <code>set_less_than</code> <p>Sets the less than filters for the query.</p> <code>set_less_than_or_equal</code> <p>Sets the less than or equal filters for the query.</p> <code>set_not_equal</code> <p>Sets the non-equality filters for the query.</p> <code>set_order_by_field</code> <p>Sets the field and direction for ordering query results.</p> <code>set_select_fields</code> <p>Sets the selected fields for the query.</p> <code>set_update_data</code> <p>Sets the data to be updated in an update query.</p> <p>Attributes:</p> Name Type Description <code>count_mode</code> <code>bool</code> <p>Gets the count mode flag.</p> <code>delete_mode</code> <code>bool</code> <p>Gets the delete mode flag.</p> <code>equal</code> <code>tuple[tuple[str, Any], ...]</code> <p>Gets the equality filters for the query.</p> <code>greater_than</code> <code>tuple[tuple[str, Any], ...]</code> <p>Gets the greater than filters for the query.</p> <code>greater_than_or_equal</code> <code>tuple[tuple[str, Any], ...]</code> <p>Gets the greater than or equal filters for the query.</p> <code>included</code> <code>tuple[tuple[str, Any], ...]</code> <p>Gets the included filter values for the query.</p> <code>insert_data</code> <code>dict[str, Any] | None</code> <p>Gets the data to be inserted in an insert query.</p> <code>less_than</code> <code>tuple[tuple[str, Any], ...]</code> <p>Gets the less than filters for the query.</p> <code>less_than_or_equal</code> <code>tuple[tuple[str, Any], ...]</code> <p>Gets the less than or equal filters for the query.</p> <code>mode</code> <code>Mode</code> <p>Determines the query mode based on the current state of the QueryBuilder.</p> <code>not_equal</code> <code>tuple[tuple[str, Any], ...]</code> <p>Gets the non-equality filters for the query.</p> <code>order_by_field</code> <code>tuple[str, bool] | None</code> <p>Gets the field and direction for ordering query results.</p> <code>select_fields</code> <code>tuple[str, ...] | Literal['*']</code> <p>Gets the selected fields for the query.</p> <code>update_data</code> <code>dict[str, Any] | None</code> <p>Gets the data to be updated in an update query.</p> Source code in <code>supadantic/query_builder.py</code> <pre><code>def __init__(self) -&gt; None:\n    self._select_fields: tuple[str, ...] | None = None\n    self._equal: tuple[tuple[str, Any], ...] = ()\n    self._not_equal: tuple[tuple[str, Any], ...] = ()\n    self._less_than_or_equal: tuple[tuple[str, Any], ...] = ()\n    self._greater_than: tuple[tuple[str, Any], ...] = ()\n    self._less_than: tuple[tuple[str, Any], ...] = ()\n    self._included: tuple[tuple[str, Any], ...] = ()\n    self._greater_than_or_equal: tuple[tuple[str, Any], ...] = ()\n    self._insert_data: dict[str, Any] | None = None\n    self._update_data: dict[str, Any] | None = None\n    self._delete_mode: bool = False\n    self._count_mode: bool = False\n    self._order_by_field: tuple[str, bool] | None = None\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.count_mode","title":"count_mode  <code>property</code>","text":"<pre><code>count_mode: bool\n</code></pre> <p>Gets the count mode flag.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the query is in count mode, False otherwise.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.delete_mode","title":"delete_mode  <code>property</code>","text":"<pre><code>delete_mode: bool\n</code></pre> <p>Gets the delete mode flag.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the query is in delete mode, False otherwise.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.equal","title":"equal  <code>property</code>","text":"<pre><code>equal: tuple[tuple[str, Any], ...]\n</code></pre> <p>Gets the equality filters for the query.</p> <p>Returns:</p> Type Description <code>tuple[tuple[str, Any], ...]</code> <p>A tuple of tuples, where each inner tuple contains a field name                            and its desired value for equality filtering.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.greater_than","title":"greater_than  <code>property</code>","text":"<pre><code>greater_than: tuple[tuple[str, Any], ...]\n</code></pre> <p>Gets the greater than filters for the query.</p> <p>Returns:</p> Type Description <code>tuple[tuple[str, Any], ...]</code> <p>A tuple of tuples, where each inner tuple contains a field name and                            its desired value for greater than filtering.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.greater_than_or_equal","title":"greater_than_or_equal  <code>property</code>","text":"<pre><code>greater_than_or_equal: tuple[tuple[str, Any], ...]\n</code></pre> <p>Gets the greater than or equal filters for the query.</p> <p>Returns:</p> Type Description <code>tuple[tuple[str, Any], ...]</code> <p>A tuple of tuples, where each inner tuple contains a field name and                            its desired value for greater than or equal filtering.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.included","title":"included  <code>property</code>","text":"<pre><code>included: tuple[tuple[str, Any], ...]\n</code></pre> <p>Gets the included filter values for the query.</p> <p>Returns:</p> Type Description <code>tuple[tuple[str, Any], ...]</code> <p>A tuple of tuples, where each inner tuple contains a field name and                            its desired value for included filtering.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.insert_data","title":"insert_data  <code>property</code>","text":"<pre><code>insert_data: dict[str, Any] | None\n</code></pre> <p>Gets the data to be inserted in an insert query.</p> <p>Returns:</p> Type Description <code>dict[str, Any] | None</code> <p>A dictionary representing the data to be inserted,                      or None if no data has been set for insertion.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.less_than","title":"less_than  <code>property</code>","text":"<pre><code>less_than: tuple[tuple[str, Any], ...]\n</code></pre> <p>Gets the less than filters for the query.</p> <p>Returns:</p> Type Description <code>tuple[tuple[str, Any], ...]</code> <p>A tuple of tuples, where each inner tuple contains a field name and                            its desired value for less than filtering.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.less_than_or_equal","title":"less_than_or_equal  <code>property</code>","text":"<pre><code>less_than_or_equal: tuple[tuple[str, Any], ...]\n</code></pre> <p>Gets the less than or equal filters for the query.</p> <p>Returns:</p> Type Description <code>tuple[tuple[str, Any], ...]</code> <p>A tuple of tuples, where each inner tuple contains a field name and                            its desired value for less than or equal filtering.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.mode","title":"mode  <code>property</code>","text":"<pre><code>mode: Mode\n</code></pre> <p>Determines the query mode based on the current state of the QueryBuilder.</p> <p>Returns:</p> Type Description <code>Mode</code> <p>The QueryBuilder.Mode enum representing the determined mode.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.not_equal","title":"not_equal  <code>property</code>","text":"<pre><code>not_equal: tuple[tuple[str, Any], ...]\n</code></pre> <p>Gets the non-equality filters for the query.</p> <p>Returns:</p> Type Description <code>tuple[tuple[str, Any], ...]</code> <p>A tuple of tuples, where each inner tuple contains a field name and                            its desired value for non-equality filtering.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.order_by_field","title":"order_by_field  <code>property</code>","text":"<pre><code>order_by_field: tuple[str, bool] | None\n</code></pre> <p>Gets the field and direction for ordering query results.</p> <p>Returns:</p> Type Description <code>tuple[str, bool] | None</code> <p>A tuple containing the field name and a boolean indicating                     descending order (True) or ascending order (False),                     or None if no ordering has been set.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.select_fields","title":"select_fields  <code>property</code>","text":"<pre><code>select_fields: tuple[str, ...] | Literal['*']\n</code></pre> <p>Gets the selected fields for the query.</p> <p>If no specific fields have been selected, this property returns <code>\"*\"</code>, which indicates that all fields should be selected.</p> <p>Returns:</p> Type Description <code>tuple[str, ...] | Literal[*]</code> <p>A tuple of strings representing the selected fields,                             or <code>\"*\"</code> if no fields have been explicitly selected.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.update_data","title":"update_data  <code>property</code>","text":"<pre><code>update_data: dict[str, Any] | None\n</code></pre> <p>Gets the data to be updated in an update query.</p> <p>Returns:</p> Type Description <code>dict[str, Any] | None</code> <p>A dictionary representing the data to be updated,                      or None if no data has been set for updating.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.Mode","title":"Mode","text":"<p>               Bases: <code>Enum</code></p> <p>Enum representing the different query modes.</p> <p>The <code>Mode</code> enum defines the different types of queries that can be built using the <code>QueryBuilder</code> class.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_count_mode","title":"set_count_mode","text":"<pre><code>set_count_mode(value: bool) -&gt; None\n</code></pre> <p>Sets the count mode flag.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>True to set the query to count mode, False otherwise.</p> required Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_count_mode(self, value: bool) -&gt; None:\n    \"\"\"\n    Sets the count mode flag.\n\n    Args:\n        value (bool): True to set the query to count mode, False otherwise.\n    \"\"\"\n\n    self._count_mode = value\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_delete_mode","title":"set_delete_mode","text":"<pre><code>set_delete_mode(value: bool) -&gt; None\n</code></pre> <p>Sets the delete mode flag.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>True to set the query to delete mode, False otherwise.</p> required Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_delete_mode(self, value: bool) -&gt; None:\n    \"\"\"\n    Sets the delete mode flag.\n\n    Args:\n        value: True to set the query to delete mode, False otherwise.\n    \"\"\"\n\n    self._delete_mode = value\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_equal","title":"set_equal","text":"<pre><code>set_equal(**kwargs) -&gt; None\n</code></pre> <p>Sets the equality filters for the query.</p> <p>This method accepts keyword arguments representing the equality filters and appends them to the existing set of equality filters.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Key-value pairs where keys are field names and values are the desired values for equality.</p> <code>{}</code> Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_equal(self, **kwargs) -&gt; None:\n    \"\"\"\n    Sets the equality filters for the query.\n\n    This method accepts keyword arguments representing the equality filters\n    and appends them to the existing set of equality filters.\n\n    Args:\n        **kwargs: Key-value pairs where keys are field names and values are the desired values for equality.\n    \"\"\"\n\n    self._equal += self._dict_to_tuple(data=kwargs)\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_greater_than","title":"set_greater_than","text":"<pre><code>set_greater_than(**kwargs) -&gt; None\n</code></pre> <p>Sets the greater than filters for the query.</p> <p>This method accepts keyword arguments representing the greater than filters and appends them to the existing set of greater than filters.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Key-value pairs where keys are field names and values are the values to exclude.</p> <code>{}</code> Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_greater_than(self, **kwargs) -&gt; None:\n    \"\"\"\n    Sets the greater than filters for the query.\n\n    This method accepts keyword arguments representing the greater than filters\n    and appends them to the existing set of greater than filters.\n\n    Args:\n        **kwargs: Key-value pairs where keys are field names and values are the values to exclude.\n    \"\"\"\n\n    self._greater_than += self._dict_to_tuple(data=kwargs)\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_greater_than_or_equal","title":"set_greater_than_or_equal","text":"<pre><code>set_greater_than_or_equal(**kwargs) -&gt; None\n</code></pre> <p>Sets the greater than or equal filters for the query.</p> <p>This method accepts keyword arguments representing the greater than or equal filters and appends them to the existing set of greater than or equal filters.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Key-value pairs where keys are field names and values are the values to exclude.</p> <code>{}</code> Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_greater_than_or_equal(self, **kwargs) -&gt; None:\n    \"\"\"\n    Sets the greater than or equal filters for the query.\n\n    This method accepts keyword arguments representing the greater than or equal filters\n    and appends them to the existing set of greater than or equal filters.\n\n    Args:\n        **kwargs: Key-value pairs where keys are field names and values are the values to exclude.\n    \"\"\"\n\n    self._greater_than_or_equal += self._dict_to_tuple(data=kwargs)\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_included","title":"set_included","text":"<pre><code>set_included(**kwargs) -&gt; None\n</code></pre> <p>Sets the included filter values for the query.</p> <p>This method accepts keyword arguments representing the include filters and appends them to the existing set of included filter values.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Key-value pairs where keys are field names and values are the values to exclude.</p> <code>{}</code> Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_included(self, **kwargs) -&gt; None:\n    \"\"\"\n    Sets the included filter values for the query.\n\n    This method accepts keyword arguments representing the include filters\n    and appends them to the existing set of included filter values.\n\n    Args:\n        **kwargs: Key-value pairs where keys are field names and values are the values to exclude.\n    \"\"\"\n\n    self._included += self._dict_to_tuple(data=kwargs)\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_insert_data","title":"set_insert_data","text":"<pre><code>set_insert_data(data: dict[str, Any]) -&gt; None\n</code></pre> <p>Sets the data to be inserted in an insert query.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>A dictionary representing the data to be inserted,                    where keys are field names and values are the corresponding values.</p> required Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_insert_data(self, data: dict[str, Any]) -&gt; None:\n    \"\"\"\n    Sets the data to be inserted in an insert query.\n\n    Args:\n        data (dict[str, Any]): A dictionary representing the data to be inserted,\n                               where keys are field names and values are the corresponding values.\n    \"\"\"\n\n    self._insert_data = data\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_less_than","title":"set_less_than","text":"<pre><code>set_less_than(**kwargs) -&gt; None\n</code></pre> <p>Sets the less than filters for the query.</p> <p>This method accepts keyword arguments representing the less than filters and appends them to the existing set of less than filters.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Key-value pairs where keys are field names and values are the values to exclude.</p> <code>{}</code> Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_less_than(self, **kwargs) -&gt; None:\n    \"\"\"\n    Sets the less than filters for the query.\n\n    This method accepts keyword arguments representing the less than filters\n    and appends them to the existing set of less than filters.\n\n    Args:\n        **kwargs: Key-value pairs where keys are field names and values are the values to exclude.\n    \"\"\"\n\n    self._less_than += self._dict_to_tuple(data=kwargs)\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_less_than_or_equal","title":"set_less_than_or_equal","text":"<pre><code>set_less_than_or_equal(**kwargs) -&gt; None\n</code></pre> <p>Sets the less than or equal filters for the query.</p> <p>This method accepts keyword arguments representing the less than or equal filters and appends them to the existing set of less than or equal filters.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Key-value pairs where keys are field names and values are the values to exclude.</p> <code>{}</code> Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_less_than_or_equal(self, **kwargs) -&gt; None:\n    \"\"\"\n    Sets the less than or equal filters for the query.\n\n    This method accepts keyword arguments representing the less than or equal filters\n    and appends them to the existing set of less than or equal filters.\n\n    Args:\n        **kwargs: Key-value pairs where keys are field names and values are the values to exclude.\n    \"\"\"\n\n    self._less_than_or_equal += self._dict_to_tuple(data=kwargs)\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_not_equal","title":"set_not_equal","text":"<pre><code>set_not_equal(**kwargs) -&gt; None\n</code></pre> <p>Sets the non-equality filters for the query.</p> <p>This method accepts keyword arguments representing the non-equality filters and appends them to the existing set of non-equality filters.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Key-value pairs where keys are field names and values are the values to exclude.</p> <code>{}</code> Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_not_equal(self, **kwargs) -&gt; None:\n    \"\"\"\n    Sets the non-equality filters for the query.\n\n    This method accepts keyword arguments representing the non-equality filters\n    and appends them to the existing set of non-equality filters.\n\n    Args:\n        **kwargs: Key-value pairs where keys are field names and values are the values to exclude.\n    \"\"\"\n\n    self._not_equal += self._dict_to_tuple(data=kwargs)\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_order_by_field","title":"set_order_by_field","text":"<pre><code>set_order_by_field(value: str) -&gt; None\n</code></pre> <p>Sets the field and direction for ordering query results.</p> <p>This method parses the input string to determine the field name and sort direction. A field name prefixed with '-' indicates descending order.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The field name to order by, optionally prefixed with '-' for descending order.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; query_builder.set_order_by_field('name')      # ascending order\n&gt;&gt;&gt; query_builder.set_order_by_field('-created')  # descending order\n</code></pre> Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_order_by_field(self, value: str) -&gt; None:\n    \"\"\"\n    Sets the field and direction for ordering query results.\n\n    This method parses the input string to determine the field name and sort direction.\n    A field name prefixed with '-' indicates descending order.\n\n    Args:\n        value (str): The field name to order by, optionally prefixed with '-' for descending order.\n\n    Examples:\n        &gt;&gt;&gt; query_builder.set_order_by_field('name')      # ascending order\n        &gt;&gt;&gt; query_builder.set_order_by_field('-created')  # descending order\n    \"\"\"\n\n    column = value.split('-')[-1]\n    desc = value.startswith('-')\n    self._order_by_field = (column, desc)\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_select_fields","title":"set_select_fields","text":"<pre><code>set_select_fields(fields: Iterable[str]) -&gt; None\n</code></pre> <p>Sets the selected fields for the query.</p> <p>This method appends the provided fields to the existing set of selected fields. It converts the input to a tuple.</p> <p>Parameters:</p> Name Type Description Default <code>fields</code> <code>Iterable[str]</code> <p>An iterable of strings representing the fields to select.</p> required Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_select_fields(self, fields: 'Iterable[str]') -&gt; None:\n    \"\"\"\n    Sets the selected fields for the query.\n\n    This method appends the provided fields to the existing set of selected\n    fields. It converts the input to a tuple.\n\n    Args:\n        fields (Iterable[str]): An iterable of strings representing the fields to select.\n    \"\"\"\n\n    if self._select_fields is None:\n        self._select_fields = tuple(fields)\n    else:\n        self._select_fields += tuple(fields)\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.set_update_data","title":"set_update_data","text":"<pre><code>set_update_data(data: dict[str, Any]) -&gt; None\n</code></pre> <p>Sets the data to be updated in an update query.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>A dictionary representing the data to be updated,                    where keys are field names and values are the new values.</p> required Source code in <code>supadantic/query_builder.py</code> <pre><code>def set_update_data(self, data: dict[str, Any]) -&gt; None:\n    \"\"\"\n    Sets the data to be updated in an update query.\n\n    Args:\n        data (dict[str, Any]): A dictionary representing the data to be updated,\n                               where keys are field names and values are the new values.\n    \"\"\"\n\n    self._update_data = data\n</code></pre>"},{"location":"clients/base/","title":"BaseClient","text":""},{"location":"clients/base/#supadantic.clients.base.BaseClient","title":"BaseClient","text":"<pre><code>BaseClient(table_name: str, schema: str | None = None)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for all client implementations.</p> <p>This class defines the interface that all concrete client classes must implement. It provides a common <code>execute</code> method for dispatching queries based on the <code>QueryBuilder</code>'s mode and defines abstract methods for the core database operations.</p> <p>Subclasses must implement the abstract methods to provide concrete implementations for interacting with a specific database or service.</p> <p>The table name is used to identify the target table for database operations.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>The name of the table to operate on.</p> required <p>Methods:</p> Name Description <code>execute</code> <p>Executes a query constructed by the provided QueryBuilder.</p> Source code in <code>supadantic/clients/base.py</code> <pre><code>def __init__(self, table_name: str, schema: str | None = None) -&gt; None:\n    \"\"\"\n    Initializes the client with the table name.\n\n    The table name is used to identify the target table for database operations.\n\n    Args:\n        table_name (str): The name of the table to operate on.\n    \"\"\"\n\n    self.table_name = table_name\n    self.schema = schema\n</code></pre>"},{"location":"clients/base/#supadantic.clients.base.BaseClient.execute","title":"execute","text":"<pre><code>execute(*, query_builder: QueryBuilder) -&gt; list[dict[str, Any]] | int\n</code></pre> <p>Executes a query constructed by the provided QueryBuilder.</p> <p>This method acts as a dispatcher, selecting the appropriate database operation based on the <code>query_builder.mode</code>.</p> <p>Parameters:</p> Name Type Description Default <code>query_builder</code> <code>QueryBuilder</code> <p>The QueryBuilder instance containing the query details            and execution mode.  The mode determines which underlying            database operation will be performed.</p> required <p>Returns:</p> Type Description <code>dict[str, Any] | int</code> <p>A dictionary containing the results of the query for insert,                     update, or filter operations; or an integer representing the number                     of affected rows for delete or count operations. The exact structure                     of the dictionary depends on the specific data returned by the underlying database.</p> Source code in <code>supadantic/clients/base.py</code> <pre><code>def execute(self, *, query_builder: QueryBuilder) -&gt; list[dict[str, Any]] | int:\n    \"\"\"\n    Executes a query constructed by the provided QueryBuilder.\n\n    This method acts as a dispatcher, selecting the appropriate database operation\n    based on the `query_builder.mode`.\n\n    Args:\n        query_builder (QueryBuilder): The QueryBuilder instance containing the query details\n                       and execution mode.  The mode determines which underlying\n                       database operation will be performed.\n\n    Returns:\n        (dict[str, Any] | int): A dictionary containing the results of the query for insert,\n                                update, or filter operations; or an integer representing the number\n                                of affected rows for delete or count operations. The exact structure\n                                of the dictionary depends on the specific data returned by the underlying database.\n    \"\"\"\n\n    map_modes: dict[QueryBuilder.Mode, Callable] = {\n        QueryBuilder.Mode.DELETE_MODE: self._delete,\n        QueryBuilder.Mode.INSERT_MODE: self._insert,\n        QueryBuilder.Mode.UPDATE_MODE: self._update,\n        QueryBuilder.Mode.FILTER_MODE: self._filter,\n        QueryBuilder.Mode.COUNT_MODE: self._count,\n    }\n\n    return map_modes[query_builder.mode](query_builder=query_builder)\n</code></pre>"},{"location":"clients/cache/","title":"CacheClient","text":""},{"location":"clients/cache/#supadantic.clients.cache.CacheClient","title":"CacheClient","text":"<pre><code>CacheClient(table_name: str, schema: str | None = None)\n</code></pre> <p>               Bases: <code>BaseClient</code></p> <p>Client for caching data in memory, using the Singleton pattern.</p> <p>This client stores data in a simple in-memory dictionary (<code>_cache_data</code>). It implements the <code>BaseClient</code> interface for common database operations, simulating database interactions by operating on the in-memory cache.</p> <p>This class is designed for testing. It is NOT suitable for production environments.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>The name of the table associated with the cache.          While the table name isn't directly used for in-memory          operations, it's stored for consistency with the          <code>BaseClient</code> interface and may be used in future          extensions of this class.</p> required Source code in <code>supadantic/clients/cache.py</code> <pre><code>def __init__(self, table_name: str, schema: str | None = None) -&gt; None:\n    \"\"\"\n    Initializes the client with the table name and an empty cache.\n\n    Args:\n        table_name (str): The name of the table associated with the cache.\n                     While the table name isn't directly used for in-memory\n                     operations, it's stored for consistency with the\n                     `BaseClient` interface and may be used in future\n                     extensions of this class.\n    \"\"\"\n    super().__init__(table_name=table_name, schema=schema)\n\n    self._cache_data: dict[int, dict[str, Any]] = {}\n</code></pre>"},{"location":"clients/supabase/","title":"SupabaseClient","text":""},{"location":"clients/supabase/#supadantic.clients.supabase.SupabaseClient","title":"SupabaseClient","text":"<pre><code>SupabaseClient(table_name: str, schema: str | None = None)\n</code></pre> <p>               Bases: <code>BaseClient</code></p> <p>Client for interacting with a Supabase database.</p> <p>This client provides methods for performing common database operations using the Supabase client library. It inherits from <code>BaseClient</code> and implements the abstract methods defined there.</p> <p>This client relies on environment variables <code>SUPABASE_URL</code> and <code>SUPABASE_KEY</code> to initialize the Supabase client.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>The name of the table to interact with.</p> required Source code in <code>supadantic/clients/supabase.py</code> <pre><code>def __init__(self, table_name: str, schema: str | None = None) -&gt; None:\n    \"\"\"\n    Initializes the Supabase client and sets up the query object.\n\n    Args:\n        table_name (str): The name of the table to interact with.\n    \"\"\"\n\n    super().__init__(table_name=table_name, schema=schema)\n    url: str = os.getenv('SUPABASE_URL', default='')\n    key: str = os.getenv('SUPABASE_KEY', default='')\n\n    supabase_client = self._get_supabase_client(url=url, key=key)\n    self.query = supabase_client\n</code></pre>"},{"location":"models/base_sb_model/","title":"BaseSBModel","text":""},{"location":"models/base_sb_model/#supadantic.models.BaseSBModel","title":"BaseSBModel","text":"<p>               Bases: <code>BaseModel</code>, <code>ABC</code></p> <p>Abstract base model for Supabase tables, integrating with Pydantic.</p> <p>This class provides a foundation for creating Pydantic models that map to tables in a Supabase database.</p> <p>Subclasses should define their table structure using Pydantic's field definition syntax. They can override methods such as <code>db_client()</code> to customize the database client used for interactions.</p> <p>Classes:</p> Name Description <code>DoesNotExist</code> <p>Exception raised when a query returns no results but at least one result was expected.</p> <code>MultipleObjectsReturned</code> <p>Exception raised when a query returns multiple results but only one result was expected.</p> <p>Methods:</p> Name Description <code>db_client</code> <p>Gets the database client class to use for interactions.</p> <code>delete</code> <p>Deletes the model instance from the database.</p> <code>save</code> <p>Saves the model instance to the database (either inserting or updating).</p>"},{"location":"models/base_sb_model/#supadantic.models.BaseSBModel.DoesNotExist","title":"DoesNotExist","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a query returns no results but at least one result was expected.</p>"},{"location":"models/base_sb_model/#supadantic.models.BaseSBModel.MultipleObjectsReturned","title":"MultipleObjectsReturned","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a query returns multiple results but only one result was expected.</p>"},{"location":"models/base_sb_model/#supadantic.models.BaseSBModel.db_client","title":"db_client  <code>classmethod</code>","text":"<pre><code>db_client() -&gt; type[BaseClient]\n</code></pre> <p>Gets the database client class to use for interactions.</p> <p>This method can be overridden in subclasses to provide a custom database client implementation.  The default implementation returns <code>SupabaseClient</code>.</p> <p>Returns:</p> Type Description <code>BaseClient</code> <p>The database client class.</p> Source code in <code>supadantic/models.py</code> <pre><code>@classmethod\ndef db_client(cls) -&gt; type['BaseClient']:\n    \"\"\"\n    Gets the database client class to use for interactions.\n\n    This method can be overridden in subclasses to provide a custom database\n    client implementation.  The default implementation returns `SupabaseClient`.\n\n    Returns:\n        (BaseClient): The database client class.\n    \"\"\"\n\n    return cls._meta.db_client\n</code></pre>"},{"location":"models/base_sb_model/#supadantic.models.BaseSBModel.delete","title":"delete","text":"<pre><code>delete() -&gt; None\n</code></pre> <p>Deletes the model instance from the database.</p> <p>This method deletes the record from the database corresponding to the model instance's ID. If the model instance does not have an ID, this method does nothing.</p> Source code in <code>supadantic/models.py</code> <pre><code>def delete(self: _M) -&gt; None:\n    \"\"\"\n    Deletes the model instance from the database.\n\n    This method deletes the record from the database corresponding to the\n    model instance's ID. If the model instance does not have an ID, this\n    method does nothing.\n    \"\"\"\n\n    if self.id:\n        query_builder = QueryBuilder()\n        query_builder.set_equal(id=self.id)\n        query_builder.set_delete_mode(True)\n\n        db_client = self._get_db_client()\n        db_client.execute(query_builder=query_builder)\n</code></pre>"},{"location":"models/base_sb_model/#supadantic.models.BaseSBModel.save","title":"save","text":"<pre><code>save() -&gt; _M\n</code></pre> <p>Saves the model instance to the database (either inserting or updating).</p> <p>If the model instance has an ID, it is updated in the database.  Otherwise, it is inserted as a new record.  The model instance is updated with the data returned from the database after the save operation.</p> <p>Returns:</p> Type Description <code>_M</code> <p>The saved model instance, updated with data from the database (e.g.,     the assigned ID for a new record).</p> Source code in <code>supadantic/models.py</code> <pre><code>def save(self: _M) -&gt; _M:\n    \"\"\"\n    Saves the model instance to the database (either inserting or updating).\n\n    If the model instance has an ID, it is updated in the database.  Otherwise,\n    it is inserted as a new record.  The model instance is updated with the\n    data returned from the database after the save operation.\n\n    Returns:\n        (_M): The saved model instance, updated with data from the database (e.g.,\n                the assigned ID for a new record).\n    \"\"\"\n\n    db_client = self._get_db_client()\n    data = self.model_dump(exclude={'id'}, mode='json')\n\n    query_builder = QueryBuilder()\n\n    if self.id:\n        query_builder.set_equal(id=self.id)\n        query_builder.set_update_data(data)\n    else:\n        query_builder.set_insert_data(data)\n\n    response_data = db_client.execute(query_builder=query_builder)[0]\n    return self.__class__(**response_data)\n</code></pre>"},{"location":"models/model_metaclass/","title":"ModelMetaclass","text":""},{"location":"models/model_metaclass/#supadantic.models.ModelMetaclass","title":"ModelMetaclass","text":"<p>               Bases: <code>ModelMetaclass</code></p> <p>Metaclass for BaseSBModel, handling Meta class configuration and objects property.</p> <p>Attributes:</p> Name Type Description <code>objects</code> <code>QSet[_M]</code> <p>Returns a QSet instance for querying the model's table.</p>"},{"location":"models/model_metaclass/#supadantic.models.ModelMetaclass.objects","title":"objects  <code>property</code>","text":"<pre><code>objects: QSet[_M]\n</code></pre> <p>Returns a QSet instance for querying the model's table. This is the primary interface for querying the database for instances of the model.</p>"}]}