{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Supadantic","text":"<p>Supadantic is a small Python library that allows you to manage Supabase tables through Pydantic models. It is very convenient to use in projects based on FastAPI, Flask, and so on.</p>"},{"location":"#important-information","title":"Important information","text":"<p>Supadantic may not have backward compatibility until version <code>0.1.0</code>. This is because the library is still experimental and is being used in several of my other projects, where requirements are still being finalized.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install using <code>pip install -U supadantic</code>.</p> <p>Also, you need to add <code>SUPABASE_URL</code> and <code>SUPABASE_KEY</code> to your env variables.</p>"},{"location":"#a-simple-example","title":"A Simple example","text":"<pre><code>from supadantic.models import BaseSBModel\n\n\nclass User(BaseSBModel):\n    # id field already defined in BaseSBModel class\n    name: str = 'John Doe'\n    is_active: bool = True\n\n    # By default table name is class name in snake_case\n    # If you want to change it - you should implement _get_table_name method\n    @classmethod\n    def _get_table_name(cls) -&gt; str:\n        return 'db_user'\n\n# Save user\nactive_user = User(name='John Snow')\nactive_user.save()\n\nnon_active_user = User(is_active=False)\nnon_active_user.save()\n\n# Get all users\nusers = User.objects.all()\n\n# Count users\nusers.count()\n\n# Get first user\nusers.first()\n\n# Get last user\nusers.last()\n\n# Filter users\nactive_users = User.objects.filter(is_active=True)\n# Or\nactive_users = User.objects.exclude(is_active=False)\n\n# Update all active users\nactive_users.update(is_active=False)\n\n# Delete all non active users\nUser.objects.exclude(is_active=True).delete()\n\n# Get one user and delete\nuser = User.objects.get(name='John Doe')\nuser.delete()\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#upcoming-features-master","title":"Upcoming features (<code>master</code>)","text":""},{"location":"changelog/#v007","title":"v0.0.7","text":"<ul> <li>Update <code>pre-commit</code> hooks (#53, #51)</li> <li>Update github workflows (#50)</li> </ul>"},{"location":"changelog/#v006","title":"v0.0.6","text":"<ul> <li>Fix supabase link in README.md file (#42)</li> <li>Optimization fix (#20)</li> <li>Typing fix (#34)</li> </ul>"},{"location":"changelog/#v005","title":"v0.0.5","text":"<ul> <li>Add documentation (#11)</li> <li>Add <code>CacheClient</code> (#35)</li> </ul>"},{"location":"q_set/","title":"QSet","text":""},{"location":"q_set/#supadantic.q_set.QSet","title":"QSet","text":"<pre><code>QSet(model_class: type[_M], cache: list[_M] | None = None, query_builder: QueryBuilder | None = None)\n</code></pre> <p>               Bases: <code>Generic[_M]</code></p> <p>Represents a set of query operations for a specific model.</p> <p>This class provides a chainable interface for building and executing database queries related to a particular model. It handles filtering, updating, creating, deleting, and retrieving data.  It's designed to work with a <code>BaseClient</code> for interacting with the database and a <code>QueryBuilder</code> for constructing queries.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Get all instances of the Model class.\n&gt;&gt;&gt; all_models = Model.objects.all()\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Filter for instances with name equal to \"example\".\n&gt;&gt;&gt; filtered_models = Model.objects.filter(name=\"example\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Get the last instance.\n&gt;&gt;&gt; last_model = Model.objects.last()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_class</code> <code>Type[_M]</code> <p>The model class associated with this QSet.</p> required <code>cache</code> <code>list[_M] | None</code> <p>An optional initial cache of model instances.</p> <code>None</code> <code>query_builder</code> <code>QueryBuilder | None</code> <p>An optional QueryBuilder instance.  If None, a new                                  instance is created.</p> <code>None</code> <p>Classes:</p> Name Description <code>InvalidField</code> <p>Exception raised when attempting to filter with an invalid field.</p> <code>InvalidFilter</code> <p>Exception raised when attempting to update or create a record with an invalid field.</p> <p>Methods:</p> Name Description <code>all</code> <p>Returns a QSet containing all instances of the associated model.</p> <code>count</code> <p>Gets the number of objects matching the current query.</p> <code>create</code> <p>Creates a new instance of the model in the database.</p> <code>delete</code> <p>Deletes the objects in the QSet from the database.</p> <code>exclude</code> <p>Excludes objects based on the provided keyword arguments.</p> <code>filter</code> <p>Returns a QSet filtered by the given keyword arguments.</p> <code>first</code> <p>Gets the first object matching the current query.</p> <code>get</code> <p>Gets a single object matching the provided filters.</p> <code>last</code> <p>Returns the last object in the QSet.</p> <code>update</code> <p>Updates the objects in the QSet with the provided data.</p> <p>Attributes:</p> Name Type Description <code>client</code> <code>BaseClient</code> <p>Gets the database client for the model.</p> Source code in <code>supadantic/q_set.py</code> <pre><code>def __init__(\n    self,\n    model_class: type[_M],\n    cache: list[_M] | None = None,\n    query_builder: QueryBuilder | None = None,\n) -&gt; None:\n    \"\"\"\n    Initializes the QSet with the model class, cache, and query builder.\n\n    Args:\n        model_class (Type[_M]): The model class associated with this QSet.\n        cache (list[_M] | None): An optional initial cache of model instances.\n        query_builder (QueryBuilder | None): An optional QueryBuilder instance.  If None, a new\n                                             instance is created.\n    \"\"\"\n\n    self._model_class = model_class\n    self._cache = cache\n    self._query_builder = query_builder if query_builder else QueryBuilder()\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.client","title":"client  <code>property</code>","text":"<pre><code>client: BaseClient\n</code></pre> <p>Gets the database client for the model.</p> <p>This method retrieves the database client associated with the model class. The database client is responsible for executing the queries.</p> <p>Returns:</p> Type Description <code>BaseClient</code> <p>The database client instance.</p>"},{"location":"q_set/#supadantic.q_set.QSet.InvalidField","title":"InvalidField","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when attempting to filter with an invalid field.</p>"},{"location":"q_set/#supadantic.q_set.QSet.InvalidFilter","title":"InvalidFilter","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when attempting to update or create a record with an invalid field.</p>"},{"location":"q_set/#supadantic.q_set.QSet.all","title":"all","text":"<pre><code>all() -&gt; QSet[_M]\n</code></pre> <p>Returns a QSet containing all instances of the associated model.</p> <p>This method clears any existing filters on the QSet.</p> <p>Returns:</p> Type Description <code>QSet[_M]</code> <p>A QSet containing all instances of the model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; qs = Model.objects.all()\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def all(self) -&gt; 'QSet[_M]':\n    \"\"\"\n    Returns a QSet containing all instances of the associated model.\n\n    This method clears any existing filters on the QSet.\n\n    Returns:\n        (QSet[_M]): A QSet containing all instances of the model.\n\n    Examples:\n        &gt;&gt;&gt; qs = Model.objects.all()\n    \"\"\"\n\n    return self._copy()\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.count","title":"count","text":"<pre><code>count() -&gt; int\n</code></pre> <p>Gets the number of objects matching the current query.</p> <p>This method returns the number of objects in the database that match the filters applied to the QSet. If the results are already cached, the count is returned from the cache. Otherwise, a database query is executed.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of objects matching the query.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; count = Model.objects.filter(name='example').count()\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def count(self) -&gt; int:\n    \"\"\"\n    Gets the number of objects matching the current query.\n\n    This method returns the number of objects in the database that match the\n    filters applied to the QSet. If the results are already cached, the\n    count is returned from the cache. Otherwise, a database query is executed.\n\n    Returns:\n        The number of objects matching the query.\n\n    Examples:\n        &gt;&gt;&gt; count = Model.objects.filter(name='example').count()\n    \"\"\"\n\n    if self._cache is not None:\n        return len(self._cache)\n\n    self._query_builder.count_mode = True\n    result: int = self.client.execute(query_builder=self._query_builder)  # type: ignore\n    return result\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.create","title":"create","text":"<pre><code>create(**data) -&gt; _M\n</code></pre> <p>Creates a new instance of the model in the database.</p> <p>This method sets the <code>insert_data</code> attribute on the QueryBuilder and executes the query. It returns a new model instance populated with the data from the database after the insert operation.</p> <p>Parameters:</p> Name Type Description Default <code>**data</code> <code>dict[str, Any]</code> <p>Keyword arguments representing the fields and their values for the new instance.</p> <code>{}</code> <p>Returns:</p> Type Description <code>_M</code> <p>The newly created model instance.</p> Source code in <code>supadantic/q_set.py</code> <pre><code>def create(self, **data) -&gt; _M:\n    \"\"\"\n    Creates a new instance of the model in the database.\n\n    This method sets the `insert_data` attribute on the QueryBuilder and executes\n    the query. It returns a new model instance populated with the data from the\n    database after the insert operation.\n\n    Args:\n        **data (dict[str, Any]): Keyword arguments representing the fields and their values for the new instance.\n\n    Returns:\n        (_M): The newly created model instance.\n    \"\"\"\n\n    for field in data.keys():\n        if field not in self._model_class.model_fields.keys():\n            raise self.InvalidField(f'Invalid field {field}!')\n\n    self._query_builder.insert_data = data\n    response_data: list[dict[str, Any]] = self.client.execute(query_builder=self._query_builder)  # type: ignore\n    return self._model_class(**response_data[0])\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.delete","title":"delete","text":"<pre><code>delete() -&gt; int\n</code></pre> <p>Deletes the objects in the QSet from the database.</p> <p>This method sets the <code>delete_mode</code> attribute on the QueryBuilder and executes the query. It returns the number of objects that were deleted.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of objects deleted.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; num_deleted = Model.objects.filter(active=False).delete()\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def delete(self) -&gt; int:\n    \"\"\"\n    Deletes the objects in the QSet from the database.\n\n    This method sets the `delete_mode` attribute on the QueryBuilder and executes\n    the query. It returns the number of objects that were deleted.\n\n    Returns:\n        (int): The number of objects deleted.\n\n    Examples:\n        &gt;&gt;&gt; num_deleted = Model.objects.filter(active=False).delete()\n    \"\"\"\n\n    self._query_builder.delete_mode = True\n    self._execute()\n    return len(self._cache) if self._cache else 0\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.exclude","title":"exclude","text":"<pre><code>exclude(**filters: Any) -&gt; QSet[_M]\n</code></pre> <p>Excludes objects based on the provided keyword arguments.</p> <p>This method adds non-equality filters to the query. Only objects that do not match any of the provided filters will be included in the resulting QSet.</p> <p>Parameters:</p> Name Type Description Default <code>**filters</code> <code>Any</code> <p>Keyword arguments representing the filters to apply.</p> <code>{}</code> <p>Returns:</p> Type Description <code>QSet[_M]</code> <p>A new QSet instance with the added exclusion filters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; qs = Model.objects.exclude(name='example', age=30)\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def exclude(self, **filters: Any) -&gt; 'QSet[_M]':\n    \"\"\"\n    Excludes objects based on the provided keyword arguments.\n\n    This method adds non-equality filters to the query. Only objects that do\n    not match any of the provided filters will be included in the resulting QSet.\n\n    Args:\n        **filters: Keyword arguments representing the filters to apply.\n\n    Returns:\n        A new QSet instance with the added exclusion filters.\n\n    Examples:\n        &gt;&gt;&gt; qs = Model.objects.exclude(name='example', age=30)\n    \"\"\"\n\n    self._validate_filters(**filters)\n    self._query_builder.not_equal = filters  # type: ignore\n    return self._copy()\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.filter","title":"filter","text":"<pre><code>filter(**filters: Any) -&gt; QSet[_M]\n</code></pre> <p>Returns a QSet filtered by the given keyword arguments.</p> <p>Each keyword argument represents a field name and its desired value. Multiple filters are combined with AND logic.</p> <p>Parameters:</p> Name Type Description Default <code>**filters</code> <code>Any</code> <p>Keyword arguments representing the filter criteria.</p> <code>{}</code> <p>Returns:</p> Type Description <code>QSet[_M]</code> <p>A new QSet instance with the specified filters applied.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; qs = Model.objects.filter(name='example', age=20)\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def filter(self, **filters: Any) -&gt; 'QSet[_M]':\n    \"\"\"\n    Returns a QSet filtered by the given keyword arguments.\n\n    Each keyword argument represents a field name and its desired value.\n    Multiple filters are combined with AND logic.\n\n    Args:\n        **filters: Keyword arguments representing the filter criteria.\n\n    Returns:\n        (QSet[_M]): A new QSet instance with the specified filters applied.\n\n    Examples:\n        &gt;&gt;&gt; qs = Model.objects.filter(name='example', age=20)\n    \"\"\"\n\n    self._validate_filters(**filters)\n    self._query_builder.equal = filters  # type: ignore\n    return self._copy()\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.first","title":"first","text":"<pre><code>first() -&gt; _M | None\n</code></pre> <p>Gets the first object matching the current query.</p> <p>This method returns the first object in the QSet. If the QSet is empty, this method returns None.</p> <p>Returns:</p> Type Description <code>_M | None</code> <p>The first object in the QSet, or None if the QSet is empty.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = Model.objects.filter(name='example').first()\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def first(self) -&gt; _M | None:\n    \"\"\"\n    Gets the first object matching the current query.\n\n    This method returns the first object in the QSet. If the QSet is empty,\n    this method returns None.\n\n    Returns:\n        The first object in the QSet, or None if the QSet is empty.\n\n    Examples:\n        &gt;&gt;&gt; obj = Model.objects.filter(name='example').first()\n    \"\"\"\n\n    try:\n        return self[0]\n    except IndexError:\n        return None\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.get","title":"get","text":"<pre><code>get(**filters: Any) -&gt; _M\n</code></pre> <p>Gets a single object matching the provided filters.</p> <p>This method retrieves a single object from the database that matches the provided filters. If no object matches the filters, a DoesNotExist exception is raised. If more than one object matches the filters, a MultipleObjectsReturned exception is raised.</p> <p>Parameters:</p> Name Type Description Default <code>**filters</code> <code>Any</code> <p>Keyword arguments representing the filters to apply.</p> <code>{}</code> <p>Returns:</p> Type Description <code>_M</code> <p>The object matching the filters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; qs = Model.objects.get(name='example', age=30)\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def get(self, **filters: Any) -&gt; _M:\n    \"\"\"\n    Gets a single object matching the provided filters.\n\n    This method retrieves a single object from the database that matches the\n    provided filters. If no object matches the filters, a DoesNotExist\n    exception is raised. If more than one object matches the filters, a\n    MultipleObjectsReturned exception is raised.\n\n    Args:\n        **filters: Keyword arguments representing the filters to apply.\n\n    Returns:\n        (_M): The object matching the filters.\n\n    Examples:\n        &gt;&gt;&gt; qs = Model.objects.get(name='example', age=30)\n    \"\"\"\n\n    self.filter(**filters)\n    self._execute()\n\n    if not self._cache:\n        raise self._model_class.DoesNotExist(f'{self._model_class.__name__} object with {filters} does not exist!')\n\n    if len(self._cache) &gt; 1:\n        raise self._model_class.MultipleObjectsReturned(\n            f'For {filters} returned more than 1 {self._model_class.__name__} objects!'\n        )\n\n    return self._cache[0]\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.last","title":"last","text":"<pre><code>last() -&gt; _M | None\n</code></pre> <p>Returns the last object in the QSet.</p> <p>If the QSet is empty, returns None. This method executes the query to populate the cache before retrieving the last element.</p> <p>Returns:</p> Type Description <code>_M | None</code> <p>The last object in the QSet, or None if the QSet is empty.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = Model.objects.all().last()\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def last(self) -&gt; _M | None:\n    \"\"\"\n    Returns the last object in the QSet.\n\n    If the QSet is empty, returns None. This method executes the query to\n    populate the cache before retrieving the last element.\n\n    Returns:\n        The last object in the QSet, or None if the QSet is empty.\n\n    Examples:\n        &gt;&gt;&gt; obj = Model.objects.all().last()\n    \"\"\"\n\n    try:\n        return self[-1]\n    except IndexError:\n        return None\n</code></pre>"},{"location":"q_set/#supadantic.q_set.QSet.update","title":"update","text":"<pre><code>update(**data: Any) -&gt; int\n</code></pre> <p>Updates the objects in the QSet with the provided data.</p> <p>This method sets the <code>update_data</code> attribute on the QueryBuilder and executes the query. It returns the number of objects that were updated.</p> <p>Parameters:</p> Name Type Description Default <code>**data</code> <code>Any</code> <p>Keyword arguments representing the fields to update and their new values.</p> <code>{}</code> <p>Returns:</p> Type Description <code>int</code> <p>The number of objects updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; num_updated = Model.objects.filter(active=True).update(name='new_name')\n</code></pre> Source code in <code>supadantic/q_set.py</code> <pre><code>def update(self, **data: Any) -&gt; int:\n    \"\"\"\n    Updates the objects in the QSet with the provided data.\n\n    This method sets the `update_data` attribute on the QueryBuilder and executes\n    the query. It returns the number of objects that were updated.\n\n    Args:\n        **data: Keyword arguments representing the fields to update and their new values.\n\n    Returns:\n        (int): The number of objects updated.\n\n    Examples:\n        &gt;&gt;&gt; num_updated = Model.objects.filter(active=True).update(name='new_name')\n    \"\"\"\n\n    for field in data.keys():\n        if field not in self._model_class.model_fields.keys():\n            raise self.InvalidField(f'Invalid field {field}!')\n\n    self._query_builder.update_data = data\n    self._execute()\n    return len(self._cache) if self._cache else 0\n</code></pre>"},{"location":"query_builder/","title":"QueryBuilder","text":""},{"location":"query_builder/#supadantic.query_builder.QueryBuilder","title":"QueryBuilder","text":"<pre><code>QueryBuilder()\n</code></pre> <p>A class for constructing database queries in a structured way.</p> <p>This class provides a fluent interface for building queriess. It encapsulates the query building logic, making it easier to construct complex queries in a readable and maintainable way.</p> <p>Classes:</p> Name Description <code>Mode</code> <p>Enum representing the different query modes.</p> <p>Attributes:</p> Name Type Description <code>count_mode</code> <code>bool</code> <p>Gets the count mode flag.</p> <code>delete_mode</code> <code>bool</code> <p>Gets the delete mode flag.</p> <code>equal</code> <code>tuple[tuple[str, Any], ...]</code> <p>Gets the equality filters for the query.</p> <code>insert_data</code> <code>dict[str, Any] | None</code> <p>Gets the data to be inserted in an insert query.</p> <code>mode</code> <code>Mode</code> <p>Determines the query mode based on the current state of the QueryBuilder.</p> <code>not_equal</code> <code>tuple[tuple[str, Any], ...]</code> <p>Gets the non-equality filters for the query.</p> <code>select_fields</code> <code>tuple[str, ...] | Literal['*']</code> <p>Gets the selected fields for the query.</p> <code>update_data</code> <code>dict[str, Any] | None</code> <p>Gets the data to be updated in an update query.</p> Source code in <code>supadantic/query_builder.py</code> <pre><code>def __init__(self) -&gt; None:\n    self._select_fields: tuple[str, ...] | None = None\n    self._equal: tuple[tuple[str, Any], ...] = ()\n    self._not_equal: tuple[tuple[str, Any], ...] = ()\n    self._insert_data: dict[str, Any] | None = None\n    self._update_data: dict[str, Any] | None = None\n    self._delete_mode: bool = False\n    self._count_mode: bool = False\n</code></pre>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.count_mode","title":"count_mode  <code>property</code> <code>writable</code>","text":"<pre><code>count_mode: bool\n</code></pre> <p>Gets the count mode flag.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the query is in count mode, False otherwise.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.delete_mode","title":"delete_mode  <code>property</code> <code>writable</code>","text":"<pre><code>delete_mode: bool\n</code></pre> <p>Gets the delete mode flag.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the query is in delete mode, False otherwise.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.equal","title":"equal  <code>property</code> <code>writable</code>","text":"<pre><code>equal: tuple[tuple[str, Any], ...]\n</code></pre> <p>Gets the equality filters for the query.</p> <p>Returns:</p> Type Description <code>tuple[tuple[str, Any], ...]</code> <p>A tuple of tuples, where each inner tuple contains a field name                            and its desired value for equality filtering.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.insert_data","title":"insert_data  <code>property</code> <code>writable</code>","text":"<pre><code>insert_data: dict[str, Any] | None\n</code></pre> <p>Gets the data to be inserted in an insert query.</p> <p>Returns:</p> Type Description <code>dict[str, Any] | None</code> <p>A dictionary representing the data to be inserted,                      or None if no data has been set for insertion.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.mode","title":"mode  <code>property</code>","text":"<pre><code>mode: Mode\n</code></pre> <p>Determines the query mode based on the current state of the QueryBuilder.</p> <p>Returns:</p> Type Description <code>Mode</code> <p>The QueryBuilder.Mode enum representing the determined mode.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.not_equal","title":"not_equal  <code>property</code> <code>writable</code>","text":"<pre><code>not_equal: tuple[tuple[str, Any], ...]\n</code></pre> <p>Gets the non-equality filters for the query.</p> <p>Returns:</p> Type Description <code>tuple[tuple[str, Any], ...]</code> <p>A tuple of tuples, where each inner tuple contains a field name and                            its desired value for non-equality filtering.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.select_fields","title":"select_fields  <code>property</code> <code>writable</code>","text":"<pre><code>select_fields: tuple[str, ...] | Literal['*']\n</code></pre> <p>Gets the selected fields for the query.</p> <p>If no specific fields have been selected, this property returns <code>\"*\"</code>, which indicates that all fields should be selected.</p> <p>Returns:</p> Type Description <code>tuple[str, ...] | Literal[*]</code> <p>A tuple of strings representing the selected fields,                             or <code>\"*\"</code> if no fields have been explicitly selected.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.update_data","title":"update_data  <code>property</code> <code>writable</code>","text":"<pre><code>update_data: dict[str, Any] | None\n</code></pre> <p>Gets the data to be updated in an update query.</p> <p>Returns:</p> Type Description <code>dict[str, Any] | None</code> <p>A dictionary representing the data to be updated,                      or None if no data has been set for updating.</p>"},{"location":"query_builder/#supadantic.query_builder.QueryBuilder.Mode","title":"Mode","text":"<p>               Bases: <code>Enum</code></p> <p>Enum representing the different query modes.</p> <p>The <code>Mode</code> enum defines the different types of queries that can be built using the <code>QueryBuilder</code> class.</p>"},{"location":"clients/base/","title":"BaseClient","text":""},{"location":"clients/base/#supadantic.clients.base.BaseClient","title":"BaseClient","text":"<pre><code>BaseClient(table_name: str)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for all client implementations.</p> <p>This class defines the interface that all concrete client classes must implement. It provides a common <code>execute</code> method for dispatching queries based on the <code>QueryBuilder</code>'s mode and defines abstract methods for the core database operations.</p> <p>Subclasses must implement the abstract methods to provide concrete implementations for interacting with a specific database or service.</p> <p>The table name is used to identify the target table for database operations.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>The name of the table to operate on.</p> required <p>Methods:</p> Name Description <code>execute</code> <p>Executes a query constructed by the provided QueryBuilder.</p> Source code in <code>supadantic/clients/base.py</code> <pre><code>def __init__(self, table_name: str) -&gt; None:\n    \"\"\"\n    Initializes the client with the table name.\n\n    The table name is used to identify the target table for database operations.\n\n    Args:\n        table_name (str): The name of the table to operate on.\n    \"\"\"\n\n    self.table_name = table_name\n</code></pre>"},{"location":"clients/base/#supadantic.clients.base.BaseClient.execute","title":"execute","text":"<pre><code>execute(*, query_builder: QueryBuilder) -&gt; list[dict[str, Any]] | int\n</code></pre> <p>Executes a query constructed by the provided QueryBuilder.</p> <p>This method acts as a dispatcher, selecting the appropriate database operation based on the <code>query_builder.mode</code>.</p> <p>Parameters:</p> Name Type Description Default <code>query_builder</code> <code>QueryBuilder</code> <p>The QueryBuilder instance containing the query details            and execution mode.  The mode determines which underlying            database operation will be performed.</p> required <p>Returns:</p> Type Description <code>dict[str, Any] | int</code> <p>A dictionary containing the results of the query for insert,                     update, or filter operations; or an integer representing the number                     of affected rows for delete or count operations. The exact structure                     of the dictionary depends on the specific data returned by the underlying database.</p> Source code in <code>supadantic/clients/base.py</code> <pre><code>def execute(self, *, query_builder: QueryBuilder) -&gt; list[dict[str, Any]] | int:\n    \"\"\"\n    Executes a query constructed by the provided QueryBuilder.\n\n    This method acts as a dispatcher, selecting the appropriate database operation\n    based on the `query_builder.mode`.\n\n    Args:\n        query_builder (QueryBuilder): The QueryBuilder instance containing the query details\n                       and execution mode.  The mode determines which underlying\n                       database operation will be performed.\n\n    Returns:\n        (dict[str, Any] | int): A dictionary containing the results of the query for insert,\n                                update, or filter operations; or an integer representing the number\n                                of affected rows for delete or count operations. The exact structure\n                                of the dictionary depends on the specific data returned by the underlying database.\n    \"\"\"\n\n    map_modes: dict[QueryBuilder.Mode, Callable] = {\n        QueryBuilder.Mode.DELETE_MODE: self._delete,\n        QueryBuilder.Mode.INSERT_MODE: self._insert,\n        QueryBuilder.Mode.UPDATE_MODE: self._update,\n        QueryBuilder.Mode.FILTER_MODE: self._filter,\n        QueryBuilder.Mode.COUNT_MODE: self._count,\n    }\n\n    return map_modes[query_builder.mode](query_builder=query_builder)\n</code></pre>"},{"location":"clients/cache/","title":"CacheClient","text":""},{"location":"clients/cache/#supadantic.clients.cache.CacheClient","title":"CacheClient","text":"<pre><code>CacheClient(table_name: str)\n</code></pre> <p>               Bases: <code>BaseClient</code></p> <p>Client for caching data in memory, using the Singleton pattern.</p> <p>This client stores data in a simple in-memory dictionary (<code>_cache_data</code>). It implements the <code>BaseClient</code> interface for common database operations, simulating database interactions by operating on the in-memory cache.</p> <p>This class is designed for testing. It is NOT suitable for production environments.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>The name of the table associated with the cache.          While the table name isn't directly used for in-memory          operations, it's stored for consistency with the          <code>BaseClient</code> interface and may be used in future          extensions of this class.</p> required Source code in <code>supadantic/clients/cache.py</code> <pre><code>def __init__(self, table_name: str) -&gt; None:\n    \"\"\"\n    Initializes the client with the table name and an empty cache.\n\n    Args:\n        table_name (str): The name of the table associated with the cache.\n                     While the table name isn't directly used for in-memory\n                     operations, it's stored for consistency with the\n                     `BaseClient` interface and may be used in future\n                     extensions of this class.\n    \"\"\"\n    super().__init__(table_name=table_name)\n\n    self._cache_data: dict[int, dict[str, Any]] = {}\n</code></pre>"},{"location":"clients/supabase/","title":"SupabaseClient","text":""},{"location":"clients/supabase/#supadantic.clients.supabase.SupabaseClient","title":"SupabaseClient","text":"<pre><code>SupabaseClient(table_name: str)\n</code></pre> <p>               Bases: <code>BaseClient</code></p> <p>Client for interacting with a Supabase database.</p> <p>This client provides methods for performing common database operations using the Supabase client library. It inherits from <code>BaseClient</code> and implements the abstract methods defined there.</p> <p>This client relies on environment variables <code>SUPABASE_URL</code> and <code>SUPABASE_KEY</code> to initialize the Supabase client.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>The name of the table to interact with.</p> required Source code in <code>supadantic/clients/supabase.py</code> <pre><code>def __init__(self, table_name: str):\n    \"\"\"\n    Initializes the Supabase client and sets up the query object.\n\n    Args:\n        table_name (str): The name of the table to interact with.\n    \"\"\"\n\n    super().__init__(table_name=table_name)\n    url: str = os.getenv('SUPABASE_URL') or ''\n    key: str = os.getenv('SUPABASE_KEY') or ''\n    supabase_client = create_client(url, key)\n    self.query = supabase_client.table(table_name=self.table_name)\n</code></pre>"},{"location":"models/base_sb_model/","title":"BaseSBModel","text":""},{"location":"models/base_sb_model/#supadantic.models.BaseSBModel","title":"BaseSBModel","text":"<p>               Bases: <code>BaseModel</code>, <code>ABC</code></p> <p>Abstract base model for Supabase tables, integrating with Pydantic.</p> <p>This class provides a foundation for creating Pydantic models that map to tables in a Supabase database.</p> <p>Subclasses should define their table structure using Pydantic's field definition syntax. They can override methods such as <code>db_client()</code> to customize the database client used for interactions.</p> <p>Classes:</p> Name Description <code>DoesNotExist</code> <p>Exception raised when a query returns no results but at least one result was expected.</p> <code>MultipleObjectsReturned</code> <p>Exception raised when a query returns multiple results but only one result was expected.</p> <p>Methods:</p> Name Description <code>db_client</code> <p>Gets the database client class to use for interactions.</p> <code>delete</code> <p>Deletes the model instance from the database.</p> <code>save</code> <p>Saves the model instance to the database (either inserting or updating).</p>"},{"location":"models/base_sb_model/#supadantic.models.BaseSBModel.DoesNotExist","title":"DoesNotExist","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a query returns no results but at least one result was expected.</p>"},{"location":"models/base_sb_model/#supadantic.models.BaseSBModel.MultipleObjectsReturned","title":"MultipleObjectsReturned","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a query returns multiple results but only one result was expected.</p>"},{"location":"models/base_sb_model/#supadantic.models.BaseSBModel.db_client","title":"db_client  <code>classmethod</code>","text":"<pre><code>db_client() -&gt; type[BaseClient]\n</code></pre> <p>Gets the database client class to use for interactions.</p> <p>This method can be overridden in subclasses to provide a custom database client implementation.  The default implementation returns <code>SupabaseClient</code>.</p> <p>Returns:</p> Type Description <code>BaseClient</code> <p>The database client class.</p> Source code in <code>supadantic/models.py</code> <pre><code>@classmethod\ndef db_client(cls) -&gt; type['BaseClient']:\n    \"\"\"\n    Gets the database client class to use for interactions.\n\n    This method can be overridden in subclasses to provide a custom database\n    client implementation.  The default implementation returns `SupabaseClient`.\n\n    Returns:\n        (BaseClient): The database client class.\n    \"\"\"\n\n    return SupabaseClient\n</code></pre>"},{"location":"models/base_sb_model/#supadantic.models.BaseSBModel.delete","title":"delete","text":"<pre><code>delete() -&gt; None\n</code></pre> <p>Deletes the model instance from the database.</p> <p>This method deletes the record from the database corresponding to the model instance's ID. If the model instance does not have an ID, this method does nothing.</p> Source code in <code>supadantic/models.py</code> <pre><code>def delete(self: _M) -&gt; None:\n    \"\"\"\n    Deletes the model instance from the database.\n\n    This method deletes the record from the database corresponding to the\n    model instance's ID. If the model instance does not have an ID, this\n    method does nothing.\n    \"\"\"\n\n    if self.id:\n        query_builder = QueryBuilder()\n        query_builder.equal = {'id': self.id}  # type: ignore\n        query_builder.delete_mode = True\n\n        db_client = self._get_db_client()\n        db_client.execute(query_builder=query_builder)\n</code></pre>"},{"location":"models/base_sb_model/#supadantic.models.BaseSBModel.save","title":"save","text":"<pre><code>save() -&gt; _M\n</code></pre> <p>Saves the model instance to the database (either inserting or updating).</p> <p>If the model instance has an ID, it is updated in the database.  Otherwise, it is inserted as a new record.  The model instance is updated with the data returned from the database after the save operation.</p> <p>Returns:</p> Type Description <code>_M</code> <p>The saved model instance, updated with data from the database (e.g.,     the assigned ID for a new record).</p> Source code in <code>supadantic/models.py</code> <pre><code>def save(self: _M) -&gt; _M:\n    \"\"\"\n    Saves the model instance to the database (either inserting or updating).\n\n    If the model instance has an ID, it is updated in the database.  Otherwise,\n    it is inserted as a new record.  The model instance is updated with the\n    data returned from the database after the save operation.\n\n    Returns:\n        (_M): The saved model instance, updated with data from the database (e.g.,\n                the assigned ID for a new record).\n    \"\"\"\n\n    db_client = self._get_db_client()\n    data = self.model_dump(exclude={'id'})\n\n    query_builder = QueryBuilder()\n\n    if self.id:\n        query_builder.equal = {'id': self.id}  # type: ignore\n        query_builder.update_data = data  # type: ignore\n    else:\n        query_builder.insert_data = data  # type: ignore\n\n    response_data = db_client.execute(query_builder=query_builder)[0]\n    return self.__class__(**response_data)\n</code></pre>"},{"location":"models/model_metaclass/","title":"ModelMetaclass","text":""},{"location":"models/model_metaclass/#supadantic.models.ModelMetaclass","title":"ModelMetaclass","text":"<p>               Bases: <code>ModelMetaclass</code></p> <p>Metaclass for BaseSBModel, adding a custom <code>objects</code> property.</p> <p>This metaclass extends Pydantic's ModelMetaclass to provide a custom <code>objects</code> property on each class that uses it. The <code>objects</code> property returns a <code>QSet</code> instance, which is used for performing database queries related to the model.</p> <p>Attributes:</p> Name Type Description <code>objects</code> <code>QSet[_M]</code> <p>Returns a QSet instance for querying the model's table.</p>"},{"location":"models/model_metaclass/#supadantic.models.ModelMetaclass.objects","title":"objects  <code>property</code>","text":"<pre><code>objects: QSet[_M]\n</code></pre> <p>Returns a QSet instance for querying the model's table. This is the primary interface for querying the database for instances of the model.</p>"}]}